// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Dispatcher {
  id             String        @id @default(cuid())
  full_name      String
  phone_number   String        @unique
  user_password  String
  history        Appointment[]
  /// @DtoRelationCanCreateOnCreate
  status         String?       @default("OFFLINE")
  firebase_token String?       @default("")
  created_at     DateTime      @default(now())
  /// @HideField({ input: true })
  updated_at     DateTime      @updatedAt
  /// @DtoUpdateOptional
  /// @HideField({ input: true })
}

model Client {
  id            Int           @id @default(autoincrement())
  full_name     String
  phone_number  String        @unique
  user_password String
  history       Appointment[]
  /// @DtoRelationCanCreateOnCreate
  createdAt     DateTime      @default(now())
  updated_at    DateTime      @updatedAt
  /// @DtoUpdateOptional
  /// @HideField({ input: true })
}

model Driver {
  id                  String                @id @default(cuid())
  name                String
  phone               String                @unique
  password            String
  status              String                @default("OFFLINE")
  carName             String
  carType             String?
  carLicense          String
  currentAddress      String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  history             Appointment[]
  driverToAppointment DriverToAppointment[]
}

model Appointment {
  id                  Int                   @id @default(autoincrement())
  clientName          String?
  clientPhone         String?
  startPoint          String
  endPoint            String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  driverAssigned      Driver?               @relation(fields: [driverId], references: [id])
  driverId            String?
  driverToAppointment DriverToAppointment[]
  clientId            Int?
  client              Client?               @relation(fields: [clientId], references: [id])
  dispatcher          Dispatcher?           @relation(fields: [dispatcherId], references: [id])
  dispatcherId        String?
  carType             String                @default("any type")
  payment             String                @default("cash")
}

model DriverToAppointment {
  id            Int         @id @default(autoincrement())
  appointmentId Int
  driverId      String
  direction     String
  action        String      @default("WAITING")
  driver        Driver      @relation(fields: [driverId], references: [id])
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([appointmentId, driverId])
}
