{"version":3,"file":"main.js","mappings":"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","sources":["webpack://taxi-booking-nx/./apps/user-service/src/app/app.controller.ts","webpack://taxi-booking-nx/./apps/user-service/src/app/app.module.ts","webpack://taxi-booking-nx/./apps/user-service/src/app/app.service.ts","webpack://taxi-booking-nx/./apps/user-service/src/app/jwt.strategy.ts","webpack://taxi-booking-nx/./libs/auth-guard/constants.ts","webpack://taxi-booking-nx/external commonjs \"@nestjs/common\"","webpack://taxi-booking-nx/external commonjs \"@nestjs/core\"","webpack://taxi-booking-nx/external commonjs \"@nestjs/jwt\"","webpack://taxi-booking-nx/external commonjs \"@nestjs/passport\"","webpack://taxi-booking-nx/external commonjs \"@prisma/client\"","webpack://taxi-booking-nx/external commonjs \"axios\"","webpack://taxi-booking-nx/external commonjs \"bcrypt\"","webpack://taxi-booking-nx/external commonjs \"passport-jwt\"","webpack://taxi-booking-nx/external commonjs \"tslib\"","webpack://taxi-booking-nx/webpack/bootstrap","webpack://taxi-booking-nx/./apps/user-service/src/main.ts"],"sourcesContent":["import {\n  Body,\n  Controller,\n  Get,\n  Param,\n  Post,\n  Put,\n  UseGuards,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { Ride, User } from '@prisma/client';\n\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getData() {\n    return this.appService.getData();\n  }\n\n  @Get(':phone_number/login')\n  getLoginUserByPhoneNumber(@Param('phone_number') phone_number: string) {\n    const res = this.appService.findLoginUser(phone_number);\n    return res;\n  }\n\n  @Post('user')\n  createUser(@Body() dto: User) {\n    return this.appService.createUser(dto);\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Get(':phone_number/ride')\n  getRideByPhoneNumber(@Param('phone_number') phone_number: string) {\n    const res = this.appService.getUser(phone_number);\n    return res;\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Get(':phone_number/user')\n  getUserByPhoneNumber(@Param('phone_number') phone_number: string) {\n    const res = this.appService.findUser(phone_number);\n    return res;\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Post('ride')\n  createAccountWriteValidation(@Body() dto: Ride) {\n    return this.appService.createRides(dto);\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Put(':phone_number/:current_address/:status/:firebase_token/driver')\n  updateDriverSucessLogin(\n    @Param('phone_number') phone_number: string,\n    @Param('current_address') current_address: string,\n    @Param('status') status: string,\n    @Param('firebase_token') firebase_token: string\n  ) {\n    const res = this.appService.updateOnlineDriverInfo(\n      phone_number,\n      current_address,\n      status,\n      firebase_token\n    );\n    return res;\n  }\n\n  @UseGuards(AuthGuard('jwt'))\n  @Get(':customer_address/assign')\n  getAssignDriver(\n    @Param('customer_address') customer_address: string\n  ): Promise<any> {\n    const drivers = this.appService.getAvailableDriver(customer_address);\n    return drivers;\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { jwtConstants } from '../../../../libs/auth-guard/constants';\n\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UserJwtStrategy } from './jwt.strategy';\n\n@Module({\n  imports: [\n    PassportModule,\n    JwtModule.register({\n      secret: jwtConstants.secret,\n      signOptions: { expiresIn: '3000s' },\n    }),\n  ],\n  controllers: [AppController],\n  providers: [AppService, UserJwtStrategy],\n  exports: [AppService],\n})\nexport class AppModule {}\n","import { Injectable } from '@nestjs/common';\nimport { Prisma, PrismaClient, Ride, User } from '@prisma/client';\nimport * as bcrypt from 'bcrypt';\nimport Axios from 'axios';\n\nconst prisma = new PrismaClient();\nconst goongKey = '0zKkBcMbQKAkWsB23qQAeFiGPQN4uQ1tsMeN0ZdG';\nconst goong = 'https://rsapi.goong.io';\nconst enum Status {\n  ONLINE = 'ONLINE',\n  OFFLINE = 'OFFLINE',\n}\nconst enum UserType {\n  CUSTOMER = 'customer',\n  DRIVER = 'driver',\n  ADMIN = 'admin',\n}\n\nexport type CallUser = {\n  basic_info: {\n    user_id: string;\n    full_name: string;\n    phone_number: string;\n  };\n  ride_history: Ride[];\n  frequently_address: object[];\n};\n\nexport type LoginUserResponse = {\n  phone_number: string;\n  user_password: string;\n};\n\nexport type CreateUserResponse = Omit<User, 'user_password'>;\n\n@Injectable()\nexport class AppService {\n  getData(): { message: string } {\n    return { message: 'Welcome to user-service!' };\n  }\n\n  async getUser(phoneNumber: string): Promise<CallUser> {\n    const user = await prisma.user.findUnique({\n      where: {\n        phone_number: phoneNumber,\n      },\n      include: {\n        ride_history: {\n          orderBy: {\n            created_at: 'desc',\n          },\n          take: 5,\n        },\n      },\n    });\n\n    const userFrequentlyAddress = await prisma.ride.groupBy({\n      where: {\n        user: {\n          phone_number: phoneNumber,\n        },\n      },\n      by: ['arrive_address'],\n      orderBy: {\n        _count: {\n          arrive_address: 'desc',\n        },\n      },\n      take: 5,\n    });\n\n    return {\n      basic_info: {\n        user_id: user.id,\n        full_name: user.full_name,\n        phone_number: user.phone_number,\n      },\n      ride_history: user.ride_history,\n      frequently_address: userFrequentlyAddress,\n    };\n  }\n\n  async createRides(dto: Ride): Promise<Ride> {\n    try {\n      const ride = await prisma.ride.create({\n        data: dto,\n      });\n      return ride;\n    } catch (e) {\n      if (e instanceof Prisma.PrismaClientKnownRequestError) {\n        // The .code property can be accessed in a type-safe manner\n        if (e.code === 'P2002') {\n          console.log(\n            'There is a unique constraint violation, a new ride cannot be created with this user'\n          );\n        }\n      }\n      throw e;\n    }\n  }\n\n  async findUser(phoneNumber: string): Promise<User> {\n    const user = await prisma.user.findUnique({\n      where: {\n        phone_number: phoneNumber,\n      },\n    });\n    return user;\n  }\n\n  async findLoginUser(phoneNumber: string): Promise<LoginUserResponse> {\n    const user = await prisma.user.findUnique({\n      where: {\n        phone_number: phoneNumber,\n      },\n    });\n    const loginUser = {\n      phone_number: user.phone_number,\n      user_password: user.user_password,\n    };\n    return loginUser;\n  }\n\n  async createUser(dto: User): Promise<CreateUserResponse> {\n    const saltOrRounds = 10;\n    const password = dto.user_password;\n    const hash = await bcrypt.hash(password, saltOrRounds);\n\n    const user = await prisma.user.create({\n      data: {\n        ...dto,\n        user_password: hash,\n      },\n    });\n    return user;\n  }\n\n  async updateOnlineDriverInfo(\n    username: string,\n    currentAddress: string,\n    status: string,\n    firebaseToken: string\n  ): Promise<any> {\n    if (status == Status.ONLINE) {\n      const driver = await prisma.user.update({\n        where: {\n          phone_number: username,\n        },\n        data: {\n          status: Status.ONLINE,\n          current_address: currentAddress,\n          firebase_token: firebaseToken,\n        },\n      });\n      return {\n        status: driver.status,\n        address: driver.current_address,\n      };\n    } else if (status == Status.OFFLINE) {\n      const driver = await prisma.user.update({\n        where: {\n          phone_number: username,\n        },\n        data: {\n          status: Status.OFFLINE,\n        },\n      });\n      return { status: driver.status };\n    }\n    return null;\n  }\n\n  async getLocation(address: string): Promise<any> {\n    const url = `${goong}/geocode?address=${address}&api_key=${goongKey}`;\n    try {\n      const geoCoding = await Axios.get(url);\n      const location = geoCoding.data.results[0].geometry.location;\n      return location;\n    } catch (e) {\n      console.error('getLocation error');\n    }\n  }\n\n  async getDistance(firstLocation: any, secondLocation: any): Promise<any> {\n    const url = `${goong}/Direction?origin=${firstLocation.lat},${firstLocation.lng}&destination=${secondLocation.lat},${secondLocation.lng}&vehicle=car&api_key=${goongKey}`;\n    try {\n      const direction = await Axios.get(url);\n      const distance = direction.data.routes[0].legs[0].distance.value;\n      return distance;\n    } catch (error) {\n      console.error('getDistance error');\n    }\n  }\n\n  async getAvailableDriver(customer_address: string): Promise<any[]> {\n    try {\n      const customerLocation = await this.getLocation(customer_address);\n      const onlineDriver = await prisma.user.findMany({\n        where: {\n          status: Status.ONLINE,\n          user_type: UserType.DRIVER,\n        },\n      });\n      const drivers = onlineDriver.map(async (driver) => {\n        const driverLocation = await this.getLocation(driver.current_address);\n        const distance = await this.getDistance(\n          customerLocation,\n          driverLocation\n        );\n        if ((await distance) < 2000) {\n          return {\n            id: driver.id,\n            driver_firebase_token: driver.firebase_token,\n            phone_number: driver.phone_number,\n            full_name: driver.full_name,\n            distance: distance,\n          };\n        }\n      });\n      return Promise.all(drivers).then((results) => {\n        return results.filter((drivers) => drivers != null);\n      });\n    } catch (error) {\n      console.error('getAvailableDriver error');\n    }\n  }\n}\n","import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { jwtConstants } from '../../../../libs/auth-guard/constants';\n\n@Injectable()\nexport class UserJwtStrategy extends PassportStrategy(Strategy) {\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: jwtConstants.secret,\n    });\n  }\n\n  async validate(payload: any) {\n    return { username: payload.username };\n  }\n}","export const jwtConstants = {\n  secret: 'secretKey',\n};\n","module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/core\");","module.exports = require(\"@nestjs/jwt\");","module.exports = require(\"@nestjs/passport\");","module.exports = require(\"@prisma/client\");","module.exports = require(\"axios\");","module.exports = require(\"bcrypt\");","module.exports = require(\"passport-jwt\");","module.exports = require(\"tslib\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\n * This is not a production server yet!\n * This is only a minimal backend to get started.\n */\n\nimport { Logger } from '@nestjs/common';\nimport { NestFactory } from '@nestjs/core';\n\nimport { AppModule } from './app/app.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  const globalPrefix = 'api';\n  app.setGlobalPrefix(globalPrefix);\n  app.enableCors();\n  const port = process.env.PORT || 3000;\n  await app.listen(port);\n  Logger.log(\n    `🚀 Application is running on: http://localhost:${port}/${globalPrefix}`\n  );\n}\n\nbootstrap();\n"],"names":[],"sourceRoot":""}